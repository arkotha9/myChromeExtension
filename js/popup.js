//Waits until all DOM elements (like your button) are available.Only then attaches your event handler
// Wait for the popup's DOM to be fully loaded

document.addEventListener('DOMContentLoaded', function() {
    const summarizeBtn = document.getElementById('summarize');
    const summaryDiv = document.getElementById('summary');

    // Add click handler for the summarize button
    summarizeBtn.addEventListener('click', async function() {
        summaryDiv.textContent = 'Summarizing...';

        try {
            //1.get current active tab in current window
            const [tab] = await chrome.tabs.query({ active:true, currentWindow:true});

           //get content from content script
           chrome.tabs.sendMessage(
            tab.id, 
            { action: "getPageContent" }, 
            async(response) => {
                //3. Call Perplexity API
                try{
                    console.log('Response received from window:', response);
                    if(response && response.content){
                        //4. Get summary from API
                        const summary = await getSummaryFromAPI(response.content);
                        summaryDiv.textContent = summary;
                    }
                    else{
                        summaryDiv.textContent = 'No content received from the page';
                    }                    
                }
                catch(error){
                    console.error('Error in receiving response from window:', chrome.runtime.lastError);
                    summaryDiv.textContent = 'Error in receiving response from window: ' + chrome.runtime.lastError.message;
                    return;
                }
            }
        );
        } catch (error) {
            console.error('Error:', error);
            summaryDiv.textContent = 'Error: ' + error.message;
        }
    });
});


// Mock API call - replace with actual API call
async function getSummaryFromAPI(content) {
    // This is a placeholder for your actual API call
    // You would typically make a fetch request to your backend here
    return new Promise((resolve) => {
        // Simulate API delay
        setTimeout(() => {
            // This is a mock summary - replace with actual API response
            resolve(`Summary of the page content (${content.length} characters):\n\n` +
                   `The page contains text content that would be summarized here. ` +
                   `In a real implementation, this would be replaced with the actual summary ` +
                   `generated by your API.`);
        }, 1000);
    });
}