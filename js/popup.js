//Waits until all DOM elements (like your button) are available.Only then attaches your event handler
//Ensure Your extension popup opens and responds correctly to clicks after DOM loaded

document.addEventListener('DOMContentLoaded', function() {
    const summarizeBtn = document.getElementById('summarize');
    const summaryDiv = document.getElementById('summary');

    summarizeBtn.addEventListener('click', async function() {
        summaryDiv.textContent = 'Summarizing...';
        
    });
});
    
// document.addEventListener('DOMContentLoaded', function() {
//     const summarizeBtn = document.getElementById('summarize');
//     const summaryDiv = document.getElementById('summary');

//     summarizeBtn.addEventListener('click', async () => {
//         summaryDiv.textContent = 'Summarizing...';
        
//         try {
//             // Get active tab
//             const [tab] = await chrome.tabs.query({ active: true, currentWindow: true });
            
//             // Execute content script to get page content
//             const result = await chrome.scripting.executeScript({
//                 target: { tabId: tab.id },
//                 function: getPageContent
//             });
            
//             const pageContent = result[0].result;
            
//             // Here you would typically call your API to get the summary
//             // For now, we'll just use a mock response
//             const summary = await getSummaryFromAPI(pageContent);
            
//             summaryDiv.textContent = summary;
//         } catch (error) {
//             console.error('Error:', error);
//             summaryDiv.textContent = 'Error generating summary. Please try again.';
//         }
//     });
// });

// Function to be executed in the context of the web page
function getPageContent() {
    // Get the main content of the page
    // This is a simple implementation - you might want to make it more sophisticated
    const content = document.body.innerText;
    return content.substring(0, 5000); // Limit content length
}

// Mock API call - replace with actual API call
async function getSummaryFromAPI(content) {
    // This is a placeholder for your actual API call
    // You would typically make a fetch request to your backend here
    return new Promise((resolve) => {
        // Simulate API delay
        setTimeout(() => {
            // This is a mock summary - replace with actual API response
            resolve(`Summary of the page content (${content.length} characters):\n\n` +
                   `The page contains text content that would be summarized here. ` +
                   `In a real implementation, this would be replaced with the actual summary ` +
                   `generated by your API.`);
        }, 1000);
    });
}